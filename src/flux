#!/usr/bin/bash

# Version of daemon shown from 'parse_options()' if '--version' is specified
daemon_version='1.13'

# Required to print messages to console, log and notifications
message(){
	local local_timestamp \
	local_log_prefix
	# Get timestamp if that behavior is allowed using '--timestamps' option
	if [[ -n "$timestamps" ]]; then
		local_timestamp="$(printf "%($timestamp_format)T") "
	fi
	# Print message depending by type
	case "$1" in
	--error )
		shift 1
		echo -e "$local_timestamp$prefix_error $*" >&2
		local_log_prefix="$prefix_error"
	;;
	--info )
		shift 1
		if [[ -z "$quiet" ]]; then
			echo -e "$local_timestamp$prefix_info $*"
			local_log_prefix="$prefix_info"
		else
			return 0
		fi
	;;
	--verbose )
		shift 1
		if [[ -n "$verbose" ]]; then
			echo -e "$local_timestamp$prefix_verbose $*"
			local_log_prefix="$prefix_verbose"
		else
			return 0
		fi
	;;
	--warning )
		shift 1
		echo -e "$local_timestamp$prefix_warning $*" >&2
		local_log_prefix="$prefix_warning"
	esac
	# Print message with timestamp to log file if responding option is specified and logging has been allowed before event reading
	if [[ -n "$allow_logging" ]]; then
		# Check log file for read-write access before store message to log
		if check_rw "$log"; then
			echo -e "$local_timestamp$local_log_prefix $*" >> "$log"
		else
			allow_logging='' message --warning "Unable to write message to log file '$log', recreate it or check read-write access!"
		fi
	fi
	# Print message as notification if '--notifications' option is specified and those have been allowed (before start event reading)
	if [[ -n "$allow_notifications" ]]; then
		notify-send "$(echo -e "$*")"
	fi
}

# Required to convert relative paths to absolute, used in '--config' and '--log' options, also in 'executable', 'mangohud-source-config' and 'mangohud-config' config keys
get_realpath(){
	local local_relative_path="$1"
	# Output will be stored to variable which calls this function from '$(â€¦)'
	realpath -m "${local_relative_path/'~'/"$HOME"}"
}

# Required to load functions from separate files, i.e. modules
load_modules(){
	local local_modules_path \
	local_temp_module \
	local_executable_path \
	local_dirname \
	local_modules_array \
	local_module_path
	# Define modules list
	local_modules_array=(
		'actions_on_exit'
		'aux'
		'background_cpu_limit'
		'background_freeze_process'
		'background_fps_limit'
		'calculate_max_limit'
		'daemon_prepare'
		'event_source'
		'exec_focus'
		'exec_unfocus'
		'find_matching_section'
		'focus_unset_limit'
		'handle_terminated_windows'
		'parse_ini'
		'parse_options'
		'set_requested_limits'
		'unfocus_request_limit'
		'unfreeze_process'
		'unset_cpu_limit'
		'unset_fps_limit'
		'validate_config'
		'validate_config_keys'
		'validate_log'
		'validate_options'
	)
	# Obtain absolute path to executable
	local_executable_path="$(get_realpath "$0")"
	# Get proper path to executable if that is symlink
	if [[ -h "$local_executable_path" ]]; then
		local_executable_path="$(readlink "$local_executable_path")"
	fi
	# Get path to directory
	local_dirname="$(dirname "$local_executable_path")"
	# Define path to modules depending by directory path
	case "$local_dirname" in
	*'/bin' )
		local_modules_path="${local_dirname/%'/bin'/'/share/flux/modules'}"
	;;
	* )
		local_modules_path="${local_dirname}/modules"
	esac
	# Check for existence of directory with modules and exit with an error if it does not exist
	if [[ -d "$local_modules_path" ]]; then
		# Load modules
		for local_temp_module in "${local_modules_array[@]}"; do
			# Define path to module
			local_module_path="${local_modules_path}/${local_temp_module}.sh"
			if ! source "$local_module_path" > /dev/null 2>&1; then
				message --error "Unable to load '$local_temp_module' module!"
				exit 1
			fi
		done
	else
		message --error "Directory with modules '$local_modules_path' does not exist!"
		exit 1
	fi
}

# Set default prefixes for messages
prefix_error='[x]'
prefix_info='[i]'
prefix_verbose='[~]'
prefix_warning='[!]'

# Set default timestamp format for logger
timestamp_format='[%Y-%m-%dT%H:%M:%S%z]'

# Additional text for errors related to option parsing
advice_on_option_error="\n$prefix_info Try 'flux --help' for more information."

# Load functions from modules
load_modules

# Options parsing and forget cmdline options
parse_options "$@" && shift "${#@}"

# Options validation
validate_options

# Config validation
validate_config

# Log validation
validate_log

# Calculation of maximum CPU limit
calculate_max_limit

# Create associative arrays to store values from config
declare -A config_key_name_map \
config_key_executable_map \
config_key_owner_map \
config_key_cpu_limit_map \
config_key_delay_map \
config_key_exec_focus_map \
config_key_exec_unfocus_map \
config_key_command_map \
config_key_mangohud_source_config_map \
config_key_mangohud_config_map \
config_key_fps_unfocus_map \
config_key_fps_focus_map

# Config parsing
parse_ini

# Config keys validation
validate_config_keys

# Declare associative arrays to store info about applied limits
declare -A is_frozen_pid_map \
freeze_bgprocess_pid_map \
is_cpu_limited_pid_map \
cpulimit_bgprocess_pid_map \
is_fps_limited_section_map \
fps_limit_bgprocess_pid_map \
fps_limited_section_map \
request_freeze_map \
request_cpu_limit_map \
request_fps_limit_map

# Declare associative arrays to store info about windows to avoid obtaining it every time to speed up code and reduce CPU-usage
declare -A cache_event_type_map \
cache_process_pid_map \
cache_process_name_map \
cache_process_executable_map \
cache_process_owner_map \
cache_process_command_map \
cache_section_map \
cache_mismatch_map

# Exit with an error if that is not a X11 session
if ! x11_session_check; then
	# Exit with an error if X11 session is invalid
	message --error "Unable to start daemon, something is wrong with X11 session!"
	exit 1
else
	# Preparation for event reading
	daemon_prepare
	# Read events and apply actions depending by event type
	while read -r event; do
		case "$event" in
		'error' )
			# Exit with an error in case 'error' event appears
			actions_on_exit
			message --error "Flux has been terminated unexpectedly!"
			exit 1
		;;
		'unset_hot' )
			# Unset '--hot' as it becomes useless from this moment
			unset hot
		;;
		'terminated'* )
			# Unset CPU/FPS limits for terminated windows and remove info about them from cache
			handle_terminated_windows
		;;
		'check_requests'* )
			# Apply CPU/FPS limits for process which have been requested to be limited
			set_requested_limits
		;;
		'restart' )
			# Prepare daemon to reapply limits on 'event_source()' restart event which appears if list of windows IDs becomes blank
			hot='1'
			# Unset info about processes to avoid using it by accident
			unset window_id \
			process_pid \
			process_name \
			process_executable \
			process_owner \
			process_command \
			section \
			previous_window_id \
			previous_process_pid \
			previous_process_name \
			previous_process_executable \
			previous_process_owner \
			previous_process_command \
			previous_section
		;;
		* )
			# Set window ID variable if event does not match with statements above
			window_id="$event"
			# Get process info using window ID if ID is not '0x0'
			case "$window_id" in
			'0x0' )
				message --verbose "Bad event with window ID 0x0 appeared, getting process info skipped."
			;;
			* )
				# Attempt to obtain info about process using window ID
				get_process_info
				get_process_info_exit_code="$?"
			esac
			# Request CPU/FPS limit for unfocused process if it matches with section
			unfocus_request_limit
			# Actions depending by exit code of 'get_process_info()'
			case "$get_process_info_exit_code" in
			'0' )
				# Find matching section for process in config
				if find_matching_section; then
					# Execute command on focus event if specified in config
					exec_focus
					# Unset CPU/FPS limit for focused process if it has been limited on unfocus
					focus_unset_limit
				fi
			;;
			* )
				# Print message depending by exit code of 'get_process_info()'
				case "$get_process_info_exit_code" in
				'1' )
					message --warning "Bad window with ID $window_id appeared, unable to obtain process info!"
				;;
				'2' )
					message --warning "Unable to obtain info about process with PID $process_pid!"
				esac
			esac
			# Execute command on unfocus event if specified in config
			exec_unfocus
			# Define what to do with info about previous window depending by exit code (overwrite or unset)
			case "$get_process_info_exit_code" in
			'0' )
				# Remember info about process for next event to run commands on unfocus event and apply CPU/FPS limit, also for pass variables to command in 'exec-unfocus' key
				previous_window_id="$window_id"
				previous_process_pid="$process_pid"
				previous_process_name="$process_name"
				previous_process_executable="$process_executable"
				previous_process_owner="$process_owner"
				previous_process_command="$process_command"
				previous_section="$section"
			;;
			* )
				# Forget info about previous window/process because it is not changed
				unset previous_window_id \
				previous_process_pid \
				previous_process_name \
				previous_process_executable \
				previous_process_owner \
				previous_process_command \
				previous_section
			esac
			unset get_process_info_exit_code
			# Unset info about process to avoid using it by an accident
			unset window_id \
			process_pid \
			process_name \
			process_executable \
			process_owner \
			process_command
			# Unset to avoid false positive on next event
			unset section
		esac
	done < <(event_source)
fi